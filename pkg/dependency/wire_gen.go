// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package dependency

import (
	"github.com/google/wire"
)

// Injectors from injector.go:

// simple.go
func InitialSimpleServices(isErr bool) (*SimpleServices, error) {
	simpleRepository := NewSimpleRepository(isErr)
	simpleServices, err := NewSimpleServices(simpleRepository)
	if err != nil {
		return nil, err
	}
	return simpleServices, nil
}

// multi_binding.go
func InitialDatabaseRepository() *DatabaseRepository {
	databaseMongoDB := NewDatabaseMongoDB()
	databasePostgreSQL := NewDatabasePostgreSQL()
	databaseRepository := NewDatabaseRepository(databaseMongoDB, databasePostgreSQL)
	return databaseRepository
}

func InitialFooBarServices() *FooBarServices {
	fooRepository := NewFooRepository()
	fooServices := NewFooServices(fooRepository)
	barServices := NewBarServices(fooRepository)
	fooBarServices := NewFooBarServices(fooServices, barServices)
	return fooBarServices
}

func InitialHelloServices() *HelloServices {
	sayHelloImpl := NewSayHelloImpl()
	helloServices := NewHelloServices(sayHelloImpl)
	return helloServices
}

func InitialFooBar() *FooBar {
	foo := NewFoo()
	bar := NewBar()
	fooBar := &FooBar{
		foo: foo,
		bar: bar,
	}
	return fooBar
}

func InitialFooBarBindingValue() *FooBar {
	foo := _wireFooValue
	bar := _wireBarValue
	fooBar := &FooBar{
		foo: foo,
		bar: bar,
	}
	return fooBar
}

var (
	_wireFooValue = &Foo{}
	_wireBarValue = &Bar{}
)

// injector.go:

// provider_set.go
// foo.go
// bar.go
var barSet = wire.NewSet(NewBarRepository, NewBarServices)

var fooSet = wire.NewSet(NewFooRepository, NewFooServices)

// jadi panggil function impl dulu, terus bind interface dan struct kontraknya
var helloSet = wire.NewSet(NewSayHelloImpl, wire.Bind(new(SayHello), new(*SayHelloImpl)))

// struct_provider.go
var FooBarSet = wire.NewSet(NewFoo, NewBar)

// Binding Value
var FooBarValueSet = wire.NewSet(wire.Value(&Foo{}), wire.Value(&Bar{}))
